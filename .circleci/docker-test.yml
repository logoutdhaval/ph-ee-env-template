version: 2.1
description: "PRIVATE ORB11"
orbs:
  helm: circleci/helm@2.0.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
commands:
  docker-image-availability-check:
    parameters:
      jira-story:
        default: latest
        type: string
        description: "Jira story ticket No"
      add-repo:
        description: |
          The url for the helm chart repository used as part of helm repo add
          command
        type: string
      namespace:
        default: ""
        description: |
          The kubernetes namespace that should be used.
        type: string
      chart:
        default: ""
        description: |
          Specify for upgrade a chart reference (e.g. stable/mariadb),
          or a path to a packaged chart (e.g. ./nginx-1.2.3.tgz),
          or a path to an unpacked chart directory (e.g. ./nginx)
          or an absolute URL (e.g. https://example.com/charts/nginx-1.2.3.tgz)
        type: string
      release-name:
        default: ""
        description: |
          Specify a name for the release.
        type: string
      cluster-name:
        default: "sit"
        type: string
      aws-region:
        default: "${REGION}"
        type: string

    steps:
      - checkout
      - run:
          name: TEST AWS REGION
          command: |
            echo REGION: "${REGION}"
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: <<parameters.cluster-name>>
          aws-region: <<parameters.aws-region>>
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: fetch docker images
          environment:
            JIRA_STORY: <<parameters.jira-story>>
            ORB_PARAM_CHART: << parameters.chart >>
            ORB_PARAM_NAMESPACE: << parameters.namespace >>
            ORB_PARAM_RELEASE_NAME: << parameters.release-name >>
            ORB_PARAM_REPO: << parameters.add-repo >>
            VALUES_TO_OVERRIDE: ''
          command: | 
            echo TICKET NO: ${JIRA_STORY}
            function docker_tag_exists() {
              curl --silent -f --head -lL https://hub.docker.com/v2/repositories/$1/tags/$2/ > /dev/null
            }
            
            DOCKER_PATH=$(echo docker.io/openmf)
            
            if docker_tag_exists openmf/community-app ${JIRA_STORY}; then
              COMMUNITY_APP=$(echo "ph-ee-g2psandbox.ph-ee-engine.community-app.image=${DOCKER_PATH}/community-app:${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-importer-rdbms test-123; then
              IMPORTER_RDBMS=$(echo "ph-ee-g2psandbox.ph-ee-engine.importer_rdbms.image=${DOCKER_PATH}/ph-ee-importer-rdbms:${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-connector-channel ${JIRA_STORY}; then
              CHANNEL=$(echo "ph-ee-g2psandbox.ph-ee-engine.channel.image=${DOCKER_PATH}/ph-ee-connector-channel:${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/message-gateway ${JIRA_STORY}; then
              MESSAGE_GATEWAY=$(echo "ph-ee-g2psandbox.ph-ee-engine.messagegateway=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-connector-gsma ${JIRA_STORY}; then
              CONNECTOR_GSMA=$(echo "ph-ee-g2psandbox.ph-ee-engine.ph_ee_connector_gsma=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-connector-mock-payment-schema ${JIRA_STORY}; then
              CONNECTOR_MOCK=$(echo "ph-ee-g2psandbox.ph-ee-engine.mockpayment=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-connector-mojaloop ${JIRA_STORY}; then
              CONNECTOR_MOJALOOP=$(echo "ph-ee-g2psandbox.ph-ee-engine.ph_ee_connector_mojaloop=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-notifications ${JIRA_STORY}; then
              NOTIFICATIONS=$(echo "ph-ee-g2psandbox.ph-ee-engine.notifications=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-identity-account-mapper ${JIRA_STORY}; then
              ACCOUNT_MAPPER=$(echo "ph-ee-g2psandbox.ph-ee-engine.account_mapper=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-importer-es ${JIRA_STORY}; then
              IMPORTER_ES=$(echo "ph-ee-g2psandbox.ph-ee-engine.importer_es=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-operations-app ${JIRA_STORY}; then
              OPERATIONS_APP=$(echo "ph-ee-g2psandbox.ph-ee-engine.operations_app=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-operations-web ${JIRA_STORY}; then
              OPERATIONS_WEB=$(echo "ph-ee-g2psandbox.ph-ee-engine.operations_web=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-vouchers ${JIRA_STORY}; then
              VOUCHERS=$(echo "ph-ee-g2psandbox.ph-ee-engine.vouchers=${JIRA_STORY}"),
            fi
            if docker_tag_exists openmf/ph-ee-vouchers ${JIRA_STORY}; then
              VOUCHERS=$(echo "ph-ee-g2psandbox.ph-ee-engine.vouchers=${JIRA_STORY}"),
            fi
            
            VALUES_TO_OVERRIDE=$(echo $IMPORTER_RDBMS)$(echo $CHANNEL)
            echo "VALUES_TO_OVERRIDE: $VALUES_TO_OVERRIDE"
            
            if [[ -z "$VALUES_TO_OVERRIDE" ]]; then
              echo "VALUES_TO_OVERRIDE is empty"
            else
              VALUES_TO_OVERRIDE="--set ${VALUES_TO_OVERRIDE:0:-1}"  
              set -- "$@" --namespace="${ORB_PARAM_NAMESPACE}"
            fi
            echo "Passing VALUES_TO_OVERRIDE with --set flag: $VALUES_TO_OVERRIDE";
            
            
            
            if [ -n "${ORB_PARAM_NAMESPACE}" ]; then
                ORB_PARAM_NAMESPACE=$(echo --namespace ${ORB_PARAM_NAMESPACE})
            fi
            
            helm repo add "${ORB_PARAM_RELEASE_NAME}" "${ORB_PARAM_REPO}"
            
            helm repo update
            
            helm upgrade --install ${VALUES_TO_OVERRIDE} "${ORB_PARAM_RELEASE_NAME}" "${ORB_PARAM_CHART} ${ORB_PARAM_NAMESPACE} "

  lint:
    parameters:
      jira-story:
        default: latest123
        type: string
        description: "Jira story ticket No"

    description: "Install lint dependency"
    steps:
      - checkout
      - run:
          name: "Install  linting tool check + <<parameters.jira-story>>"
          command: echo "Install successful"
      - run:
          name: "Run linting on given dir"
          command: echo "linting successful"
  test:
    description: "Run integration test"
    steps:
      - checkout
      - run:
          name: "Run unit test"
          command: echo "unit test successful"
      - run:
          name: "Run integration test"
          command: echo "integration test successful"

jobs:
  docker-image-availability-check:
    docker:
      - image: cimg/openjdk:17.0.0
    parameters:
      jira-story:
        type: string
        default: "latest"
      namespace:
        type: string
        default: ""
      add-repo:
        type: string
      release-name:
        default: ""
        type: string
      chart:
        default: ""
        type: string
      cluster-name:
        default: "sit"
        type: string
      aws-region:
        default: "$REGION"
        type: string

    steps:
      - docker-image-availability-check:
          jira-story: <<parameters.jira-story>>
          namespace: <<parameters.namespace>>
          add-repo: <<parameters.add-repo>>
          release-name: <<parameters.release-name>>
          chart: <<parameters.chart>>
          cluster-name: <<parameters.cluster-name>>
          aws-region: <<parameters.aws-region>>

  lint-and-test:
    docker:
      - image: cimg/openjdk:17.0.0
    parameters:
      jira:
        type: string
        default: "55555"
    steps:
      - lint:
          jira-story: <<parameters.jira>>
      - test

